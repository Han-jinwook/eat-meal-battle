name: 매일 급식 정보 업데이트

on:
  schedule:
    # 매일 오전 10시에 실행 (한국 시간, UTC+9)
    # UTC 기준으로는 오전 1시
    - cron: '0 1 * * *'
  
  # 수동으로도 실행 가능하도록 설정
  workflow_dispatch:

jobs:
  update-meals:
    runs-on: ubuntu-latest
    steps:
      - name: 급식 정보 API 호출
        env:
          API_KEY: ${{ secrets.CRON_API_KEY }}
          NETLIFY_URL: ${{ secrets.NETLIFY_URL || 'https://lunbat.com' }}
        run: |
          echo "급식 정보 업데이트 작업 시작: $(date)"
          
          # 여러 가지 가능한 URL 정의
          SITE_URL="${NETLIFY_URL}"
          FUNCTION_PATH="/.netlify/functions/cron-meals"
          API_PATH="/api/cron/meals"
          
          # 시도할 URL 목록
          URLS=(
            "${SITE_URL}${FUNCTION_PATH}"
            "${SITE_URL}${API_PATH}"
            "https://lunbat.com${FUNCTION_PATH}"
            "https://lunbat.com${API_PATH}"
          )
          
          echo "API 키: ${API_KEY:0:3}***"
          echo "SITE URL: ${SITE_URL}"
          
          # 각 URL을 순차적으로 시도
          for URL in "${URLS[@]}"; do
            echo "\n\n시도하는 URL: ${URL}"
            
            # API 엔드포인트 상태 확인
            echo "API 엔드포인트 상태 확인:"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${URL}" \
              -H "Content-Type: application/json" \
              -H "Origin: https://github.com" \
              -H "User-Agent: GitHub-Actions-Workflow")
            
            echo "Status 코드: ${STATUS}"
            
            # 200 또는 401(인증 오류) 응답이면 적절한 URL
            if [[ "${STATUS}" == "200" || "${STATUS}" == "401" ]]; then
              echo "\n작동하는 URL 발견: ${URL}"
              
              # 실제 API 호출
              echo "\n실제 API 호출:"
              RESPONSE=$(curl -s -X GET "${URL}?api_key=${API_KEY}&skip_notification=true" \
                -H "Content-Type: application/json" \
                -H "Origin: https://github.com" \
                -H "User-Agent: GitHub-Actions-Workflow" \
                -H "Referer: https://github.com")
              
              echo "\n응답:\n${RESPONSE}"
              
              # 성공이면 종료
              if [[ "${RESPONSE}" == *"success":true* ]]; then
                echo "\n성공적으로 API 호출 완료"
                echo "\n급식 정보 업데이트 작업 완료: $(date)"
                exit 0
              fi
            fi
          done
          
          # 모든 URL이 실패하면 오류 반환
          echo "\n오류: 모든 URL이 실패했습니다."
          exit 1
