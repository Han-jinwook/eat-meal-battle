name: 매일 급식 정보 업데이트

on:
  schedule:
    # 매일 오전 10시에 실행 (한국 시간, UTC+9)
    # UTC 기준으로는 오전 1시
    - cron: '0 1 * * *'
  
  # 수동으로도 실행 가능하도록 설정
  workflow_dispatch:

jobs:
  update-meals:
    runs-on: ubuntu-latest
    steps:
      # 초기 정보 출력
      - name: 작업 시작 정보 출력
        run: echo "급식 정보 업데이트 작업 시작: $(date)"
      
      # URL 1 - Netlify 함수 직접 호출
      - name: URL 1 - Netlify 함수 직접 호출
        id: url1
        continue-on-error: true
        env:
          API_KEY: ${{ secrets.CRON_API_KEY }}
        run: |
          echo "시도 1: https://lunbat.com/.netlify/functions/cron-meals"
          RESPONSE=$(curl -s -X GET "https://lunbat.com/.netlify/functions/cron-meals?api_key=${API_KEY}&skip_notification=true" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Workflow")
          echo "응답: ${RESPONSE}"
          if [[ "${RESPONSE}" == *"success":true* ]]; then
            echo "URL 1 성공!"
            echo "::set-output name=success::true"
          else
            echo "URL 1 실패"
            echo "::set-output name=success::false"
          fi
      
      # URL 2 - API 경로를 통한 호출
      - name: URL 2 - API 경로를 통한 호출
        id: url2
        if: steps.url1.outputs.success != 'true'
        continue-on-error: true
        env:
          API_KEY: ${{ secrets.CRON_API_KEY }}
        run: |
          echo "시도 2: https://lunbat.com/api/cron/meals"
          RESPONSE=$(curl -s -X GET "https://lunbat.com/api/cron/meals?api_key=${API_KEY}&skip_notification=true" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Workflow")
          echo "응답: ${RESPONSE}"
          if [[ "${RESPONSE}" == *"success":true* ]]; then
            echo "URL 2 성공!"
            echo "::set-output name=success::true"
          else
            echo "URL 2 실패"
            echo "::set-output name=success::false"
          fi
      
      # URL 3 - 직접 서버 API 호출
      - name: URL 3 - 직접 서버 API 호출
        id: url3
        if: steps.url1.outputs.success != 'true' && steps.url2.outputs.success != 'true'
        continue-on-error: true
        env:
          API_KEY: ${{ secrets.CRON_API_KEY }}
        run: |
          echo "시도 3: https://lunbat.com/api/meals"
          RESPONSE=$(curl -s -X POST "https://lunbat.com/api/meals" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Workflow" \
            -d '{"api_key": "'"${API_KEY}"'", "skip_notification": true}')
          echo "응답: ${RESPONSE}"
          if [[ "${RESPONSE}" == *"success":true* ]]; then
            echo "URL 3 성공!"
            echo "::set-output name=success::true"
          else
            echo "URL 3 실패"
            echo "::set-output name=success::false"
          fi
      
      # 결과 확인
      - name: 결과 확인
        if: steps.url1.outputs.success == 'true' || steps.url2.outputs.success == 'true' || steps.url3.outputs.success == 'true'
        run: echo "급식 정보 업데이트 성공! 작업 완료: $(date)"
      
      # 모든 URL이 실패한 경우
      - name: 실패 시 오류 출력
        if: steps.url1.outputs.success != 'true' && steps.url2.outputs.success != 'true' && steps.url3.outputs.success != 'true'
        run: |
          echo "모든 URL에서 급식 정보 업데이트 실패!"
          exit 1
