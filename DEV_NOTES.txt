# 급식 퀴즈 페이지 개발 계획 (2025-05-29)

## 1. 개요

급식 메뉴를 기반으로 한 AI 생성 퀴즈 시스템을 구현합니다. 학교별, 학년별로 난이도가 조정된 퀴즈를 제공하고, 통계 및 장원 시스템을 구축합니다.

## 2. 데이터베이스 구조

### meal_quizzes 테이블
- id (UUID): 퀴즈 고유 ID
- school_code (String): 학교 코드 (중복 저장)
- grade (Integer): 학년 (1~6) (중복 저장)
- meal_date (Date): 급식 날짜 (중복 저장)
- meal_id (UUID): 연결된 급식 ID (meal_menus 테이블 참조)
- question (Text): 퀴즈 질문
- options (JSONB): 선택지 배열 (4개 정도)
- correct_answer (Integer): 정답 인덱스
- difficulty (Integer): 난이도 (1~3, 학년에 따라 자동 조정)
- created_at (Timestamp): 생성 시간

### quiz_results 테이블
- id (UUID): 결과 고유 ID
- user_id (UUID): 사용자 ID (auth.users 참조)
- quiz_id (UUID): 퀴즈 ID (meal_quizzes 참조)
- is_correct (Boolean): 정답 여부
- selected_option (Integer): 사용자가 선택한 옵션 인덱스
- answer_time (Integer): 응답 시간(초)
- created_at (Timestamp): 생성 시간

### quiz_champions 테이블
- id (UUID): 고유 ID
- school_code (String): 학교 코드
- grade (Integer): 학년
- user_id (UUID): 사용자 ID
- month (Integer): 월 (1~12)
- year (Integer): 년도
- correct_count (Integer): 맞춘 문제 수
- total_count (Integer): 총 문제 수
- avg_answer_time (Float): 평균 응답 시간
- created_at (Timestamp): 생성 시간

## 3. 데이터베이스 설계 결정사항

- **중복 저장 vs 조인**: meal_quizzes 테이블에는 school_code, grade, meal_date 등 필요한 정보를 모두 중복 저장합니다. 이는 퀴즈가 생성 후 변경되지 않는 특성이 있고, 조회가 빈번하기 때문에 성능 향상을 위한 결정입니다.
- **quiz_results 테이블**: 여기서는 quiz_id만 저장하고 필요한 정보는 meal_quizzes 테이블에서 조인해서 가져옵니다. 결과 데이터는 양이 많아질 수 있어 중복을 최소화합니다.

## 4. 컴포넌트 구조

1. **QuizPage**: 퀴즈 페이지 메인 컴포넌트
   - 시간에 따라 오늘의 퀴즈 또는 어제의 결과 표시
   - 사용자의 학교/학년 정보 확인

2. **TodayQuiz**: 오늘의 퀴즈 컴포넌트
   - 퀴즈 질문과 선택지 표시
   - 사용자 응답 처리
   - 결과 표시 (정답/오답)

3. **MyQuizStats**: 사용자의 퀴즈 통계 컴포넌트
   - 이번 달 성적 표시
   - 지난 달 성적 표시
   - 그래프로 시각화

4. **SchoolChampions**: 학교 급식 퀴즈 장원 명단 컴포넌트
   - 학년별 장원 리스트
   - 장원 훈장 이모지 표시

## 5. API 엔드포인트

1. **GET /api/quizzes/today**
   - 오늘의 퀴즈 가져오기 (학교/학년 기반)
   - 12:30 이전에는 아직 퀴즈 없음 표시

2. **POST /api/quizzes/submit**
   - 퀴즈 답변 제출
   - 결과 저장 및 반환

3. **GET /api/quizzes/stats**
   - 사용자의 퀴즈 통계 가져오기
   - 이번 달/지난 달 성적

4. **GET /api/quizzes/champions**
   - 학교별 장원 명단 가져오기
   - 월별, 학년별 필터링

## 6. AI 퀴즈 생성 로직

1. **퀴즈 생성 함수**:
   - 자동 퀴즈 생성 기능이 제거되었습니다. 사용자 요청에 따라 수동으로 퀴즈를 생성해야 합니다.
   - 학년별 난이도 조절 (1-2학년: 쉬움, 3-4학년: 중간, 5-6학년: 어려움)
   - 영양소, 식품 특성, 요리 방법 등 다양한 주제로 퀴즈 생성

2. **스케줄러**:
   - 자동 퀴즈 생성 기능이 제거되었습니다. 수동으로 퀴즈를 생성해야 합니다.

## 7. 부정행위 방지 및 정답 공개

1. **부정행위 방지 방안**:
   - 퀴즈 응답에 시간 제한 (예: 30초)
   - 하루에 한 번만 퀴즈를 풀 수 있도록 제한
   - 정답 지연 공개 (오후 6시나 7시에 일괄 공개)

2. **정답 공개 방식**:
   - 사용자가 답변 제출 시 즉시 정답 여부 저장
   - 정답 공개는 오후 6시나 7시에 일괄적으로 진행
   - 정답 공개 전까지는 "결과는 오후 7시에 공개됩니다" 메시지 표시
   - 정답 공개 시 해설도 함께 제공하여 교육적 효과 증대

## 8. 구현 단계

1. **1단계: 데이터베이스 설정**
   - 필요한 테이블 생성
   - RLS 정책 설정
   - 인덱스 추가

2. **2단계: 퀴즈 생성 로직 구현**
   - 수동으로 퀴즈를 생성해야 합니다.

3. **3단계: API 엔드포인트 구현**
   - 퀴즈 조회, 제출, 통계 API 개발
   - 시간 기반 접근 제어 로직

4. **4단계: 프론트엔드 컴포넌트 구현**
   - 퀴즈 페이지 레이아웃
   - 퀴즈 표시 및 제출 UI
   - 통계 및 장원 명단 UI

5. **5단계: 배포 설정**
   - netlify.toml 파일에 빌드 명령 수정: `npm install --legacy-peer-deps && npm run build`
   - 의존성 충돌 문제 해결을 위해 `--legacy-peer-deps` 플래그 추가

## 9. 페이지 구성

1. **오늘의 급식 퀴즈**
   - 12:30 이후에만 표시
   - 학교/학년에 맞는 퀴즈 제공
   - 제한 시간 내 응답 필요

2. **나의 퀴즈 성적**
   - 이번 달 현재 퀴즈 성적
   - 지난 달 실적 (예: 25년 5월: 20개 맞춤/총 24개 중)

3. **지난 달 우리 학교 급식장원 명단**
   - 학년별 장원 리스트
   - 별명 옆에 금년의 장원훈장 숫자가 이모지로 표시 (급식장원 이모지)

## 10. 추가 고려사항

- **UI/UX**: 표준적인 디자인으로 모든 학년이 사용하기 쉽게 구현
- **캐싱 전략**: 퀴즈 데이터 및 통계 캐싱으로 성능 최적화
- **오프라인 지원**: 퀴즈 데이터 로컬 저장으로 오프라인에서도 이용 가능


c:\Users\WD\Downloads\supabase-schema-izkumvvlkrkgiuuczffp (5).png


## 11. 구현 진행상황 (2025-05-29)

### 1단계: 데이터베이스 설정 (완료)
- 필요한 테이블 생성 확인: `meal_quizzes`, `quiz_results`, `quiz_champions` 테이블이 이미 존재함
- RLS 정책 설정: 각 테이블에 적절한 보안 정책 적용
- 인덱스 추가: 성능 최적화를 위한 인덱스 생성
- 월별 장원 계산 트리거 함수(calculate_monthly_champions) 구현: SECURITY DEFINER 속성 추가로 RLS 정책 우회

### 2단계: 퀴즈 생성 로직 구현 (미구현)
- 수동으로 퀴즈를 생성해야 합니다.

### 3단계: API 엔드포인트 구현 (완료)
- 퀴즈 관련 API 엔드포인트 생성: `quiz.js`
  - GET /api/quiz: 오늘의 퀴즈 가져오기
  - POST /api/quiz/answer: 퀴즈 답변 제출
  - GET /api/quiz/champions: 장원 목록 조회
- Netlify 리다이렉트 규칙 추가: `/api/quiz*` → `/.netlify/functions/quiz:splat`

### 4단계: 프론트엔드 컴포넌트 구현 (완료)
- 기존 플레이스홀더를 완전한 기능의 퀴즈 페이지(`quiz/page.tsx`)로 교체
- 순수 CSS로 애니메이션 효과 구현 (의존성 충돌 문제 해결)
  - 정답 시 폭죽 효과: CSS 키프레임 애니메이션
  - 선택지 호버/클릭 효과: CSS 트랜지션
- 난이도 표시, 정답 체크, 장원 목록 표시 기능 구현

### 5단계: 배포 설정 (완료)
- netlify.toml 파일에 빌드 명령 수정: `npm install --legacy-peer-deps && npm run build`
- 의존성 충돌 문제 해결을 위해 `--legacy-peer-deps` 플래그 추가

### 다음 단계 계획
- 사용자 피드백 수집 및 개선점 파악
- 퀴즈 내용의 품질 모니터링 및 개선
- 추가 기능 구현: 뱃지 시스템, 소셜 공유 등

## 12. 퀴즈 생성 자동화 시스템 수정 내역 (2025-06-01)

### 문제 해결 사항

1. **자동 퀴즈 생성 기능 제거**
   - 자동 퀴즈 생성 기능이 제거되었습니다. 수동으로 퀴즈를 생성해야 합니다.

2. **JavaScript 구문 오류 수정**
   - 오류: 코드에 남아있던 템플릿 마커(`{{ ... }}`) 로 인한 구문 오류
   - 해결: 템플릿 마커 제거 및 실제 JavaScript 코드로 대체

3. **데이터베이스 스키마 불일치 해결**
   - 문제 1: `explanation` 필드가 데이터베이스에 없어서 발생한 오류
   - 해결: `ALTER TABLE meal_quizzes ADD COLUMN explanation TEXT;` SQL 실행
   - 문제 2: `difficulty` 필드 타입 불일치 (코드: 문자열, DB: 정수)
   - 해결: `calculateDifficulty` 함수 수정하여 문자열 대신 정수 반환 (1=쉬움, 2=중간, 3=어려움)

4. **실행 시간 최적화**
   - Netlify Functions 스케줄 조정: 한국 시간 기준 오후 11:30 (UTC 14:30)로 설정
   - `netlify.toml` 파일의 cron 표현식 업데이트: `schedule = "30 14 * * *"`

### 최종 확인 사항

- 2025-05-31 23:30 스케줄 실행 결과: 자동 퀴즈 생성 기능이 제거되었습니다. 수동으로 퀴즈를 생성해야 합니다.
- 로그 확인: `Quiz generation completed: 0 successful, 0 failed`
- 데이터 검증: difficulty 필드가 정수형(1-3)으로 저장되고, explanation 필드도 정상적으로 저장됨

### 자동화 시스템 현황

현재 다음 스케줄로 자동화 작업이 설정되어 있습니다:

1. 퀴즈 생성: 수동으로 퀴즈를 생성해야 합니다.
2. 이미지 생성 확인: 매일 오전 12:30 (UTC 3:30)
3. 이미지 생성 실행: 매일 오후 2:00 (UTC 5:00)

3. 사용자 경험 개선 전략
퀴즈 진행 흐름
12:30 이전: "곧 오늘의 퀴즈가 공개됩니다" 메시지 표시
12:30~19:00: 퀴즈 풀기 가능, 결과는 바로 DB에 저장되나 화면에는 "오후 7시에 정답이 공개됩니다" 메시지 표시
19:00 이후: 정답과 해설 공개, 오답인 경우 정확한 정답 표시
사용자 참여 유도
알림 시스템 활용: 12:30에 "오늘의 퀴즈가 공개되었습니다" 알림 발송
뱃지 시스템: 연속 정답 스트릭에 따른 뱃지 부여
소셜 공유: 퀴즈 결과를 친구들과 공유할 수 있는 기능
4. 보안 및 부정행위 방지
서버 사이드 시간 검증: 클라이언트 시간이 아닌 서버 시간으로 퀴즈 접근 제한
응답 시간 측정: 비정상적으로 빠른 응답 시간 감지
중복 제출 방지: 사용자당 1일 1회만 퀴즈 제출 가능
답변 암호화: 클라이언트에 정답 정보 노출 방지
5. 퀴즈 장원 시스템 구현
월별 집계: 매월 마지막 날 자정에 통계 계산
학년별 장원 선정: 정확도와 응답 시간을 고려한 점수 계산
장원 표식: 사용자 프로필에 장원 뱃지 표시
이전 장원 히스토리: 지난 달 장원 명단 공개


## 12. 퀴즈 생성 스케줄러 수정 및 개선 (2025-05-30)

### 1. 문제 상황
- 퀴즈 생성 스케줄러(`generate-meal-quizzes.js`)가 실행되지 않거나 제대로 동작하지 않는 문제 발생
- 환경 변수 및 API 키 검증 관련 오류 발생

### 2. 개선 사항

#### 스케줄러 시간 조정
- 테스트를 위해 스케줄러 실행 시간을 조정 (16:15 KST / UTC 07:15)
- `netlify.toml` 파일에서 스케줄러 시간 설정 업데이트

#### Supabase 클라이언트 초기화 개선
- 환경 변수 오류 처리 강화
- Supabase URL 하드코딩으로 실패 방지
- 오류 발생 시 자세한 로깅 추가

#### OpenAI 클라이언트 초기화 개선
- 최신 OpenAI SDK 방식으로 업데이트
- `Configuration`과 `OpenAIApi` 대신 새로운 `OpenAI` 클래스 사용
- 클라이언트 초기화 실패 시 오류 처리 강화

#### API 키 검증 로직 개선
- 성공적으로 실행 중인 다른 스케줄러(`update-meals.js`) 참고하여 코드 개선
- API 키 검증 로직 제거하여 스케줄러에서 호출 시 오류 방지

#### 로깅 개선
- 상세한 디버그 로그 추가로 문제 발생 시 원인 파악 용이
- 각 단계별 상세 로깅으로 실행 흐름 추적 가능

### 3. 후속 작업
- 스케줄러 실행 로그 모니터링으로 정상 작동 확인
- 생성된 퀴즈의 품질 검토 및 개선
- 필요시 AI 프롬프트 조정으로 퀴즈 품질 향상


6/8  새벽 1시

Supabase 클라이언트 코드를 싱글톤 패턴으로 수정했는데도  카카오 로그인 에러