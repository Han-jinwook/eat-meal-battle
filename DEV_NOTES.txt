데브노트

# 급식 평점 통계 시스템 개선 (진행 중)

## 개요
- 기존 meal_rating_stats 테이블을 확장하여 학교 전체 및 학년별 평점 통계를 제공
- 각 학년(1~6학년)별 평균 평점 및 평점 수 추적
- 실시간 업데이트를 위한 데이터베이스 트리거 구현

## 구현 현황
- [x] meal_rating_stats 테이블 확장 (추가 필드)
  - 기존 avg_rating → school_avg_rating으로 변경
  - 기존 rating_count → school_rating_count로 변경
  - 각 학년별 평균 및 수량 필드 추가 (grade1_avg_rating, grade1_rating_count, ...)

- [x] 통계 업데이트 트리거 함수 구현
  - meal_ratings와 school_infos 테이블을 user_id로 직접 조인
  - 학교 코드별, 학년별 통계 자동 계산
  
## 남은 작업
- [x] 프론트엔드에서 학년별 통계 활용 구현
  - 학년별 통계를 시각화하는 UI 컴포넌트 필요
  - SchoolRating 컴포넌트 업데이트

- [ ] 통계 데이터 조회 API 최적화
  - 학년별 필터링 기능 추가
  - 캐싱 전략 검토

## 참고사항
- meal_ratings 테이블은 user_id를 통해 school_infos 테이블과 직접 연결됨
- meal_rating_stats 테이블에서 grade=0, class_number=0인 레코드는 학교 전체 통계를 나타냄
- 현재 구현은 학년별 통계만 포함하며, 반별 통계는 성능 이슈로 제외함

# 개발 노트

## 2025-05-27: 댓글 및 답글 시스템 구현 계획

### 1. 데이터베이스 구조 설계

#### 필요한 테이블
1. **comments** - 기본 댓글 테이블
   ```sql
   CREATE TABLE comments (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     meal_id UUID REFERENCES meal_menus(id) ON DELETE CASCADE,
     user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
     content TEXT NOT NULL,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     updated_at TIMESTAMPTZ DEFAULT NOW(),
     is_deleted BOOLEAN DEFAULT FALSE
   );
   ```

2. **comment_replies** - 답글 테이블
   ```sql
   CREATE TABLE comment_replies (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
     user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
     content TEXT NOT NULL,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     updated_at TIMESTAMPTZ DEFAULT NOW(),
     is_deleted BOOLEAN DEFAULT FALSE
   );
   ```

3. **comment_likes** - 댓글 좋아요 테이블
   ```sql
   CREATE TABLE comment_likes (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
     user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     UNIQUE(comment_id, user_id)
   );
   ```

4. **reply_likes** - 답글 좋아요 테이블
   ```sql
   CREATE TABLE reply_likes (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     reply_id UUID REFERENCES comment_replies(id) ON DELETE CASCADE,
     user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
     created_at TIMESTAMPTZ DEFAULT NOW(),
     UNIQUE(reply_id, user_id)
   );
   ```

### 2. 컴포넌트 구조

#### 주요 컴포넌트
1. **CommentSection** - 댓글 섹션 전체 관리
   - 댓글 목록 표시 및 무한 스크롤 구현
   - 새 댓글 작성 폼 포함

2. **CommentItem** - 개별 댓글 표시
   - 프로필 이미지, 사용자 이름 표시
   - 좋아요 기능
   - 답글 토글 버튼

3. **ReplyList** - 특정 댓글에 대한 답글 목록
   - 답글 작성 폼 포함
   - 무한 스크롤 지원

4. **ReplyItem** - 개별 답글 표시
   - 프로필 이미지, 사용자 이름 표시
   - 좋아요 기능

5. **CommentForm** - 댓글 작성 폼
6. **ReplyForm** - 답글 작성 폼
7. **LikeButton** - 좋아요 버튼 (재사용 가능)

### 3. API 엔드포인트

#### 댓글 관련 API
- `GET /api/comments?meal_id={meal_id}&page={page}` - 댓글 목록 조회 (페이지네이션)
- `POST /api/comments` - 새 댓글 작성
- `PUT /api/comments/{id}` - 댓글 수정
- `DELETE /api/comments/{id}` - 댓글 삭제

#### 답글 관련 API
- `GET /api/comments/{comment_id}/replies?page={page}` - 답글 목록 조회
- `POST /api/comments/{comment_id}/replies` - 새 답글 작성
- `PUT /api/comments/replies/{id}` - 답글 수정
- `DELETE /api/comments/replies/{id}` - 답글 삭제

#### 좋아요 관련 API
- `POST /api/comments/{id}/like` - 댓글 좋아요/취소
- `POST /api/comments/replies/{id}/like` - 답글 좋아요/취소

### 4. 기능 구현 단계

#### 1단계: 데이터베이스 설정
- 테이블 생성 및 RLS 정책 설정
- 필요한 인덱스 추가

#### 2단계: 기본 컴포넌트 구현
- CommentSection, CommentItem 컴포넌트 구현
- 댓글 목록 조회 및 작성 기능

#### 3단계: 답글 기능 구현
- ReplyList, ReplyItem 컴포넌트 구현
- 답글 토글, 조회, 작성 기능

#### 4단계: 좋아요 기능 구현
- LikeButton 컴포넌트 구현
- 댓글/답글 좋아요 기능

#### 5단계: 무한 스크롤 구현
- Intersection Observer API 활용
- 스크롤 위치에 따른 추가 데이터 로드

#### 6단계: 실시간 업데이트 구현
- Supabase 실시간 구독 기능 추가
- 댓글/답글/좋아요 실시간 반영

### 5. UI/UX 디자인 고려사항

- 댓글과 답글 구분을 위한 시각적 계층 구조
- 사용자 프로필 이미지 및 별명 표시 형식
- 좋아요 버튼 상호작용 애니메이션
- 무한 스크롤 로딩 표시기
- 댓글 작성 중 미리보기 기능

### 6. 추가 고려사항

- 댓글/답글 삭제 시 소프트 삭제 처리
- 사용자 알림 기능 연동 (댓글/답글/좋아요 시)
- 댓글 신고 기능
- 관리자 모드럴 (부적절한 댓글 관리)


## 2025-05-27 개발 진행 사항

### 1. 외래키 관계 오류 해결
- 'comments'와 'user_id' 간의 외래키 관계 오류 수정
- JOIN 쿼리 대신 별도의 쿼리를 사용하는 방식으로 변경
  - 댓글 데이터와 사용자 데이터를 개별적으로 가져온 후 JS로 매핑
  - comments -> users 테이블로의 직접 조인 대신 개별 조회 방식 사용

### 2. 학교 기반 제한 기능 추가
- 특정 급식에 해당하는 학교의 학생만 댓글/좋아요 가능하도록 제한
- CommentSection과 CommentItem 컴포넌트에 schoolCode 파라미터 추가
- useUserSchool 훅으로 현재 사용자가 해당 학교 학생인지 확인 로직 구현
- 학교가 다른 경우 접근 제한 메시지 표시

### 3. 좋아요 토글 기능 개선
- 좋아요 한번 더 클릭 시 취소되지 않는 문제 해결
- 낙관적 UI 업데이트 패턴 적용
  - 사용자 액션 즉시 UI 반영으로 즉각적인 피드백 제공
  - 백엔드 응답 대기 없이 UI 상태 먼저 변경 후 서버 통신
  - 에러 발생 시 UI 롤백 로직 추가
- 좋아요 버튼에 로딩 상태 표시 기능 추가

### 4. 답글(Reply) 시스템 구현
- 답글 관련 컴포넌트 생성
  - ReplyForm: 답글 작성 폼 컴포넌트
  - ReplyItem: 개별 답글 표시 컴포넌트
- 답글 CRUD 기능 구현
  - 답글 작성, 수정, 삭제 기능
  - 답글 좋아요 기능
- 실시간 업데이트 적용
  - Supabase 실시간 구독으로 답글 변경사항 즉시 반영
  - 댓글 펼침 상태에 따른 효율적인 데이터 로딩 로직 구현

### 5. 필요한 Supabase 테이블 및 정책
```sql
-- replies 테이블 생성
CREATE TABLE IF NOT EXISTS public.replies (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  comment_id UUID NOT NULL REFERENCES public.comments(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  is_deleted BOOLEAN NOT NULL DEFAULT false
);

-- reply_likes 테이블 생성
CREATE TABLE IF NOT EXISTS public.reply_likes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  reply_id UUID NOT NULL REFERENCES public.replies(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE(reply_id, user_id)
);

-- RLS 정책 설정 (Row Level Security)
ALTER TABLE public.replies ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reply_likes ENABLE ROW LEVEL SECURITY;
```

### 6. 해결해야 할 이슈 및 추가 개선사항
- 복잡한 댓글 스레드 UI 개선 (깊이가 깊어질 경우 가독성)
- 댓글/답글 페이지네이션 최적화
- 이미지 첨부 기능 추가 검토
- 댓글 알림 시스템 구현
