# 급식 배틀 프로젝트 기능별 인덱스

**버전**: 1.0.0  
**최종 업데이트**: 2025-05-16

## 목차
- [이미지 관리 기능](#image-management)
  - [컴포넌트](#image-management-components)
  - [API 엔드포인트](#image-api-endpoints)
- [급식 정보 관리](#meal-information)
  - [컴포넌트](#meal-components)
  - [훅](#meal-hooks)
  - [API 엔드포인트](#meal-api-endpoints)
- [사용자 관리](#user-management)
  - [훅](#user-hooks)
  - [API 엔드포인트](#user-api-endpoints)
- [학교 정보 관리](#school-management)
  - [페이지](#school-pages)
  - [API 엔드포인트](#school-api-endpoints)
- [알림 관리](#notification-management)
  - [컴포넌트](#notification-components)
  - [API 엔드포인트](#notification-api-endpoints)
- [Firebase 메시징](#firebase-messaging)
  - [컴포넌트](#firebase-components)
  - [유틸리티](#firebase-utilities)
- [UI 컴포넌트](#ui-components)
  - [헤더 컴포넌트](#header-components)
  - [훅](#ui-hooks)
- [스케줄러 기능](#schedulers)
- [백엔드 함수](#backend-functions)
  - [이미지 관련 함수](#image-related-functions)
- [유틸리티 및 헬퍼](#utilities-and-helpers)
  - [날짜 유틸리티](#date-utilities)
  - [이미지 유틸리티](#image-utilities)
  - [급식 업데이터 유틸리티](#meal-updater-utility)
  - [API 헬퍼](#api-helpers)
- [Supabase 통합](#supabase-integration)
  - [Supabase 클라이언트](#supabase-client)
  - [Supabase 서버](#supabase-server)
  - [Supabase Admin](#supabase-admin)
  - [Supabase Provider](#supabase-provider)
- [페이지](#pages)
  - [메인 페이지](#main-page)
  - [프로필 페이지](#profile-page)
  - [로그인 페이지](#login-page)
  - [배틀 페이지](#battle-page)
  - [퀴즈 페이지](#quiz-page)
  - [랭킹 페이지](#ranking-page)

---

## 이미지 관리 기능 {#image-management}

> **주요 기능**: 사용자가 급식 이미지를 업로드하고 AI로 검증하며, 자동 생성된 이미지를 관리하는 기능을 제공합니다.

### 컴포넌트 {#image-management-components}

#### MealImageUploader
```tsx
// apps/app/src/components/MealImageUploader.tsx
function handleAiImageGeneration(mealId: string): Promise<void>
// @param mealId - 이미지를 생성할 급식 ID
// @returns - 이미지 생성 결과 Promise

function handleFileChange(event: React.ChangeEvent<HTMLInputElement>): void
// @param event - 파일 선택 이벤트 객체
// @returns - 없음

function handleUpload(file: File): Promise<boolean>
// @param file - 업로드할 이미지 파일
// @returns - 업로드 성공 여부

function verifyImage(imageUrl: string): Promise<boolean>
// @param imageUrl - 검증할 이미지 URL
// @returns - 검증 성공 여부

function handleDeleteImage(imageId: string): Promise<void>
// @param imageId - 삭제할 이미지 ID
// @returns - 삭제 결과 Promise
```

**비고**: 이미지 업로드 시 Supabase Storage에 저장되며, AI 검증은 OpenAI API를 통해 이루어집니다.

#### ImageWithFallback
```tsx
// apps/app/src/components/ImageWithFallback.tsx
function ImageWithFallback({ src, fallbackSrc, alt, ...props }): JSX.Element
// @param src - 원본 이미지 URL
// @param fallbackSrc - 로드 실패 시 표시할 대체 이미지 URL
// @param alt - 이미지 대체 텍스트
// @returns - 이미지 컴포넌트
```

### 이미지 API 엔드포인트 {#image-api-endpoints}

| 메서드 | 경로                      | 설명                 | 요청 본문                                  | 응답                         |
| ------ | ------------------------- | -------------------- | ------------------------------------------ | ------------------------------ |
| POST   | `/api/meal-images/upload` | 이미지 업로드 처리   | `{ mealId: string, file: File }`           | `{ success: boolean, url: string }` |
| POST   | `/api/meal-images/verify` | 이미지 AI 검증       | `{ imageUrl: string }`                      | `{ isValid: boolean, reason?: string }` |
| POST   | `/api/meal-images/create` | 이미지 정보 생성     | `{ mealId: string, imageUrl: string }`     | `{ success: boolean, id: string }` |

**비고**: 모든 API 요청은 인증된 사용자만 사용 가능합니다. 이미지 파일은 multipart/form-data 형식으로 전송되어야 합니다.

---

## 급식 정보 관리 {#meal-information}

> **주요 기능**: 학교별, 날짜별 급식 정보를 조회하고 표시하며, 사용자가 이미지를 업로드할 수 있는 기능을 제공합니다.

### 컴포넌트 {#meal-components}

#### MealCard
```tsx
// apps/app/src/components/MealCard.tsx
function MealCard({ meal, onImageUpload }): JSX.Element
// @param meal - 표시할 급식 정보 객체
// @param onImageUpload - 이미지 업로드 핸들러 함수
// @returns - 급식 카드 컴포넌트

function getMealTypeIcon(mealType: string): React.ReactNode
// @param mealType - 급식 타입 (예: 중식, 석식, 조식)
// @returns - 해당 급식 타입에 맞는 아이콘 컴포넌트
```

**비고**: MealCard는 급식 메뉴, 이미지, 날짜, 학교 정보를 포함하며 이미지 업로드 버튼도 포함합니다.

### 훅 {#meal-hooks}

#### useMeals
```tsx
// apps/app/src/hooks/useMeals.ts
function useMeals(date: string, schoolCode: string): {
  meals: Meal[],
  loading: boolean,
  error: Error | null,
  refetch: () => void
}
// @param date - 조회할 날짜 (YYYY-MM-DD 형식)
// @param schoolCode - 학교 코드
// @returns - 급식 데이터, 로딩 상태, 오류, 재조회 함수

function fetchMealInfo(date: string, schoolCode: string): Promise<Meal[]>
// @param date - 조회할 날짜 (YYYY-MM-DD 형식)
// @param schoolCode - 학교 코드
// @returns - 급식 정보 배열
```

**비고**: 이 훅은 React Query를 사용하여 급식 데이터를 캐싱하고 자동 리페치 기능을 제공합니다.

### 급식 API 엔드포인트 {#meal-api-endpoints}

| 메서드 | 경로         | 설명                | 요청 본문/쿼리 파라미터                      | 응답                          |
| ------ | ------------ | ------------------- | ------------------------------------ | ------------------------------- |
| GET    | `/api/meals` | 급식 정보 조회      | `?date=YYYY-MM-DD&schoolCode=string`  | `{ meals: Meal[] }`              |
| POST   | `/api/meals` | 급식 정보 생성/수정 | `{ schoolCode, date, mealType, menu }` | `{ success: boolean, id: string }` |

**비고**: 급식 정보는 NEIS Open API에서 가져오며, 스케줄러에 의해 매일 업데이트됩니다. 사용자는 자신의 학교 급식만 조회할 수 있습니다.

---

## 사용자 관리 {#user-management}

### 훅 {#user-hooks}

#### useUserSchool
```tsx
// apps/app/src/hooks/useUserSchool.ts
function fetchUserSchool(): Promise<{user: User, school: School}>
// @param - 없음
// @returns - 사용자 및 학교 정보 객체
```

### 사용자 API 엔드포인트 {#user-api-endpoints}

| 메서드 | 경로                  | 설명                |
| ------ | --------------------- | ------------------- |
| POST   | `/api/delete-account` | 사용자 계정 삭제 처리 |

---

## 학교 정보 관리 {#school-management}

### 페이지 {#school-pages}

#### 학교 검색 페이지
```tsx
// apps/app/src/app/school-search/page.tsx
// 학교 검색 및 선택 기능
```

### 학교 API 엔드포인트 {#school-api-endpoints}

| 메서드 | 경로          | 설명            |
| ------ | ------------- | --------------- |
| GET    | `/api/schools` | 학교 정보 검색   |

---

## 알림 관리 {#notification-management}

### 컴포넌트 {#notification-components}

#### NotificationBell
```tsx
// apps/app/src/components/NotificationBell.tsx
function NotificationBell({ count }: { count: number }): JSX.Element
// @param count - 표시할 알림 개수
// @returns - 알림 벨 컴포넌트
```

### 알림 API 엔드포인트 {#notification-api-endpoints}

| 메서드 | 경로                       | 설명              |
| ------ | -------------------------- | ----------------- |
| POST   | `/api/notifications/create` | 알림 생성         |
| POST   | `/api/notifications/read`   | 알림 읽음 처리    |
| POST   | `/api/notifications/send`   | 알림 발송         |

---

## Firebase 메시징 {#firebase-messaging}

### 컴포넌트 {#firebase-components}

#### FirebaseMessaging
```tsx
// apps/app/src/components/firebase/FirebaseMessaging.tsx
// Firebase 메시징 설정 및 토큰 관리
```

#### FirebaseMessagingWrapper
```tsx
// apps/app/src/components/firebase/FirebaseMessagingWrapper.tsx
// Firebase 메시징 래퍼 컴포넌트
```

### Firebase 유틸리티 {#firebase-utilities}

#### Firebase 설정
```ts
// apps/app/src/lib/firebase/firebaseConfig.ts
function initializeFirebase(): FirebaseApp // Firebase 앱 초기화
function fetchToken(): Promise<string> // FCM 토큰 가져오기
function onMessageListener(): Promise<PayloadMessage> // 포그라운드 메시지 수신 처리
```

#### Firebase Admin
```ts
// apps/app/src/lib/firebase/firebaseAdmin.ts
// 서버 측 Firebase 관리 기능
```

---

## UI 컴포넌트 {#ui-components}

### 헤더 컴포넌트 {#header-components}

#### AppHeader
```tsx
// apps/app/src/components/AppHeader.tsx
// 앱 헤더 표시
```

#### MainHeader
```tsx
// apps/app/src/components/MainHeader.tsx
function MainHeader({ title }: { title: string }): JSX.Element
// @param title - 표시할 헤더 제목
// @returns - 메인 헤더 컴포넌트
```

### 훅 {#ui-hooks}

#### useModal
```tsx
// apps/app/src/hooks/useModal.ts
// 모달 상태 관리 및 표시
```

---

## 스케줄러 기능 {#schedulers}

> **주요 기능**: 자동화된 시간 기반 작업을 수행하여 급식 정보 업데이트, 이미지 생성, 이미지 누락 확인 등을 처리합니다.

### 스케줄러 요약

| 스케줄러 이름 | 파일 경로 | 실행 주기 | 주요 기능 | 관련 유틸리티 |
|--------------|--------------|------------|------------|------------|
| 급식 정보 업데이트 | update-meals.js | 매일 오전 9시 | NEIS API에서 급식 정보 가져와 DB 업데이트 | mealUpdater.ts |
| AI 이미지 자동 생성 | auto-generate-meal-images.js | 매일 오후 5시 | 이미지 없는 급식에 대해 AI 이미지 생성 | imageUtils.ts |
| 이미지 누락 확인 | check-missing-meal-images.js | 매일 12:30 | 이미지 없는 급식 목록 생성 | - |

### 급식 정보 업데이트 스케줄러
```js
// apps/app/netlify/functions/update-meals.js
exports.handler = async function(event, context) {
  // NEIS Open API에서 급식 정보를 가져와 데이터베이스에 업데이트
  // @param event - Netlify Functions 이벤트 객체
  // @returns - 성공/실패 응답
}
```

**실행 주기**: 매일 오전 9시에 자동 실행

**작동 방식**:
1. 등록된 모든 학교의 코드를 가져옵니다.
2. 각 학교별로 NEIS Open API를 통해 오늘부터 한 달 간의 급식 정보를 조회합니다.
3. 조회한 정보를 파싱하여 Supabase 데이터베이스에 업데이트합니다.
4. 중복 업데이트를 방지하기 위해 upsert 작업을 수행합니다.

**비고**: `mealUpdater.ts` 유틸리티를 활용하여 여러 학교의 급식 정보를 일괄 업데이트합니다. 이 스케줄러는 서버 시간 기준 오전 9시에 실행되며, 실행 시 CRON_API_KEY를 통한 인증이 필요합니다.

### AI 이미지 자동 생성 스케줄러
```js
// apps/app/netlify/functions/auto-generate-meal-images.js
exports.handler = async function(event, context) {
  // 승인된 이미지가 없는 급식에 대해 AI로 이미지 자동 생성
  // @param event - Netlify Functions 이벤트 객체
  // @returns - 성공/실패 응답
}
```

**실행 주기**: 매일 오후 5시에 자동 실행

**작동 방식**:
1. 오늘 날짜의 승인된 이미지가 없는 급식 목록을 조회합니다.
2. 각 급식의 메뉴 정보를 기반으로 OpenAI API를 통해 이미지를 생성합니다.
3. 생성된 이미지를 Supabase Storage에 저장하고 급식 이미지 데이터를 업데이트합니다.

**비고**: OpenAI의 GPT-Image-1 모델을 사용하여 한국 학교 급식 스타일의 이미지를 생성합니다. 이미지는 자동으로 'auto-generated' 상태로 저장되며, 관리자 검토 후 'approved' 상태로 변경됩니다.

### 이미지 누락 확인 스케줄러
```js
// apps/app/netlify/functions/check-missing-meal-images.js
exports.handler = async function(event, context) {
  // 승인된 이미지가 없는 급식 목록 생성
  // @param event - Netlify Functions 이벤트 객체
  // @returns - 이미지 누락 급식 목록
}
```

**실행 주기**: 매일 12:30에 자동 실행

**작동 방식**:
1. 오늘 날짜의 모든 급식 정보를 조회합니다.
2. 승인된 이미지(status='approved')가 없는 급식만 필터링합니다.
3. 휴일인지 확인하여 휴일이 아닌 날의 급식만 처리합니다.
4. 결과를 응답으로 반환하여 관리자 대시보드에서 확인할 수 있도록 합니다.

**비고**: 이 스케줄러는 이미지가 없는 급식을 확인하는 용도로만 사용되며, 실제 이미지 생성은 수행하지 않습니다. 관리자는 이 정보를 통해 이미지 생성이 필요한 급식을 파악할 수 있습니다.

---

## 백엔드 함수 {#backend-functions}

### 이미지 관련 함수 {#image-related-functions}

#### 급식 이미지 검증
```js
// apps/app/netlify/functions/verify-meal-image.js
// 업로드된 급식 이미지 AI 검증
```

#### 급식 이미지 업로드
```js
// apps/app/netlify/functions/upload-meal-image.js
// 급식 이미지 업로드 처리
```

#### 급식 이미지 생성
```js
// apps/app/netlify/functions/generate-meal-image.js
// 사용자 요청에 의한 급식 이미지 생성
```

---

## 유틸리티 및 헬퍼 {#utilities-and-helpers}

> **주요 기능**: 애플리케이션 전반에서 사용되는 공통 기능을 제공하는 유틸리티 함수들을 모아놓은 모듈입니다.

### 날짜 유틸리티 {#date-utilities}
```ts
// apps/app/src/utils/DateUtils.ts
function formatDisplayDate(date: Date): string
// @param date - 포맷팅할 날짜 객체
// @returns - 'YYYY년 MM월 DD일' 형식의 문자열

function formatApiDate(date: Date): string
// @param date - 포맷팅할 날짜 객체
// @returns - 'YYYYMMDD' 형식의 문자열 (NEIS API 요청용)

function getCurrentDate(): Date
// @returns - 현재 날짜와 시간을 가진 Date 객체
```

**비고**: 날짜 포맷팅은 한국 표준시간(KST)을 기준으로 처리됩니다.

### 이미지 유틸리티 {#image-utilities}
```ts
// apps/app/src/utils/imageUtils.ts
function getSafeImageUrl(url: string): string
// @param url - 원본 이미지 URL
// @returns - 유효한 URL 또는 기본 이미지 URL

function handleImageError(event: React.SyntheticEvent<HTMLImageElement>): void
// @param event - 이미지 오류 이벤트
// @returns - 없음
```

**비고**: 이미지 URL이 유효하지 않은 경우 기본 이미지로 대체하는 기능을 포함합니다.

### 급식 업데이터 유틸리티 {#meal-updater-utility}
```ts
// apps/app/src/lib/mealUpdater.ts
function updateAllMeals(schoolCodes: string[]): Promise<void>
// @param schoolCodes - 업데이트할 학교 코드 배열
// @returns - 업데이트 완료 Promise
// @description - 여러 학교의 급식 정보를 일괄 업데이트하는 함수

function parseMealInfo(response: any): MealData[]
// @param response - NEIS API 응답 데이터
// @returns - 파싱된 급식 정보 배열
// @description - API 응답을 애플리케이션에서 사용할 수 있는 형태로 파싱

function fetchMealInfo(schoolCode: string, startDate: string, endDate: string): Promise<any>
// @param schoolCode - 학교 코드
// @param startDate - 조회 시작 날짜 (YYYYMMDD 형식)
// @param endDate - 조회 종료 날짜 (YYYYMMDD 형식)
// @returns - NEIS API 응답 데이터
// @description - NEIS Open API에서 급식 정보를 가져오는 함수
```

**작동 방식**:
1. `updateAllMeals` 함수는 여러 학교의 코드를 받아 반복문을 통해 각 학교의 급식 정보를 업데이트합니다.
2. `fetchMealInfo` 함수는 NEIS Open API에 요청을 보내 급식 정보를 가져옵니다.
3. `parseMealInfo` 함수는 API 응답을 파싱하여 데이터베이스에 저장할 수 있는 형태로 변환합니다.

**비고**: 이 유틸리티는 주로 `update-meals.js` 스케줄러에서 호출되어 사용되며, 스케줄러가 아닌 유틸리티 함수입니다. 이 함수는 서버 사이드에서만 실행되며 NEIS_API_KEY 환경 변수가 필요합니다.

### API 헬퍼 {#api-helpers}
```ts
// apps/app/src/lib/api-helper.ts
function fetchWithAuth(url: string, options?: RequestInit): Promise<Response>
// @param url - 요청할 API URL
// @param options - fetch 옵션
// @returns - fetch 응답 Promise
// @description - 인증 토큰을 포함하여 API 요청을 보내는 함수

const API_ENDPOINTS = {
  meals: '/api/meals',
  mealImages: '/api/meal-images',
  schools: '/api/schools',
  notifications: '/api/notifications',
  // ... 기타 엔드포인트
}
// @description - 애플리케이션에서 사용하는 API 엔드포인트 정의
```

**비고**: API 헬퍼는 클라이언트 사이드에서 API 요청을 보낼 때 인증 토큰을 자동으로 추가하는 기능을 제공합니다. 이를 통해 코드 중복을 줄이고 일관된 인증 처리를 보장합니다.

---

## Supabase 통합 {#supabase-integration}

### Supabase 클라이언트 {#supabase-client}
```ts
// apps/app/src/lib/supabase.ts
function createClient(): SupabaseClient // Supabase 클라이언트 생성
```

### Supabase 서버 {#supabase-server}
```ts
// apps/app/src/lib/supabase-server.ts
// 서버 측 Supabase 클라이언트 및 인증 관련 기능
```

### Supabase Admin
```ts
// apps/app/src/lib/supabaseAdmin.ts
// 관리자 권한으로 Supabase 접근 기능
```

### Supabase Provider
```tsx
// apps/app/src/lib/supabase/supabase-provider.tsx
// Supabase 컨텍스트 제공자
```

---

## 페이지

### 메인 페이지 {#main-page}
```tsx
// apps/app/src/app/page.tsx
// 급식 정보 표시 및 이미지 업로드 기능
```

### 프로필 페이지 {#profile-page}
```tsx
// apps/app/src/app/profile/page.tsx
// 사용자 프로필 정보 표시 및 관리
```

### 로그인 페이지 {#login-page}
```tsx
// apps/app/src/app/login/page.tsx
// 사용자 로그인 및 회원가입
```

### 배틀 페이지 {#battle-page}
```tsx
// apps/app/src/app/battle/page.tsx
// 급식 배틀 기능 (준비 중)
```

### 퀴즈 페이지 {#quiz-page}
```tsx
// apps/app/src/app/quiz/page.tsx
// 급식 관련 퀴즈 기능
```

### 랭킹 페이지 {#ranking-page}
```tsx
// apps/app/src/app/ranking/page.tsx
// 사용자 랭킹 표시
```
