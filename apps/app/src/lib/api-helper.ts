/**
 * API 요청 유틸리티
 * 
 * 직접적인 API 호출을 안전하게 처리하고 오류를 관리하기 위한 헬퍼 함수
 */

// 클라이언트 측에서만 실행되는 코드 (SSR 대응)
let originalFetch: typeof fetch;

// 브라우저 환경인지 확인
if (typeof window !== 'undefined') {
  // 원래의 fetch 함수 보관
  originalFetch = window.fetch;
  
  // 전역 fetch 함수 오버라이드
  window.fetch = function(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {
  // URL 추출 (다양한 브라우저 호환성 개선)
  let url = '';
  try {
    url = typeof input === 'string' ? input : input instanceof URL ? input.toString() : input.url;
  } catch (e) {
    console.debug('URL 추출 오류, 문자열로 변환 시도:', e);
    url = String(input);
  }
  
  // 수파베이스 직접 REST API 호출 감지
  if (url.includes('izkumvvlkrkgiuuczffp.supabase.co/rest/v1/')) {
    // 예외 처리할 엔드포인트 정의
    const exemptEndpoints = [
      '/meal_images', 
      '/profiles', 
      '/menu_item_ratings',
      '/comment_likes'
    ];
    
    // 예외 처리 검사 (URL 경로 패턴 매칭 강화)
    const isExemptEndpoint = exemptEndpoints.some(endpoint => url.includes(endpoint));
    
    // 웨일 브라우저 감지 시도
    const isWhale = typeof navigator !== 'undefined' && 
                   navigator.userAgent && 
                   (navigator.userAgent.includes('Whale') || 
                    navigator.userAgent.includes('NAVER'));
    
    if (isExemptEndpoint) {
      console.debug(`예외 처리 엔드포인트 요청 허용 ${isWhale ? '(웨일 브라우저)' : ''} (api-helper.ts):`, url);
      
      // 웨일 브라우저에서 특별 처리 - 헤더 보강
      if (isWhale) {
        if (!init) init = {};
        if (!init.headers) init.headers = {};
        
        // 헤더가 Headers 객체인 경우 처리
        if (init.headers instanceof Headers) {
          if (!init.headers.has('Accept')) init.headers.set('Accept', 'application/json');
        } 
        // 일반 객체인 경우
        else {
          init.headers = {
            ...init.headers,
            'Accept': 'application/json'
          };
        }
      }
      
      return originalFetch(input, init); // 예외 엔드포인트는 직접 요청 전송
    }
    
    // API 키 헤더 확인 (안전한 방식으로 개선)
    let apiKeyPresent = false; 
    try {
      if (init?.headers) {
        if (init.headers instanceof Headers) {
          // Headers 객체인 경우 .has() 메소드 사용
          apiKeyPresent = init.headers.has('apikey') || init.headers.has('authorization');
        } else if (typeof init.headers === 'object') {
          // 일반 객체인 경우 안전한 방식으로 검사
          const headerKeys = Object.keys(init.headers);
          apiKeyPresent = headerKeys.some(key => 
            typeof key === 'string' && 
            (key.toLowerCase() === 'apikey' || key.toLowerCase() === 'authorization')
          );
        }
      }
    } catch (err) {
      console.debug('API 키 헤더 검증 중 오류 (무시됨):', err);
      apiKeyPresent = true; // 검증 실패시 안전하게 진행
    }
    
    // API 키가 없는 경우 401 응답 반환
    if (!apiKeyPresent) {
      console.debug('권한 없는 Supabase REST API 요청 차단 (api-helper.ts):', url, init?.headers);
      return Promise.resolve(new Response(JSON.stringify({
        message: "No API key found in request",
        hint: "No 'apikey' request header or url param was found. (Generated by api-helper.ts)"
      }), { status: 401 }));
    }
  }
  
  // 일반 요청은 원래 fetch로 처리
  return originalFetch(input, init);
  };
}

// 기본 요청 함수 - API 키 검증과 오류 처리 추가됨
export async function fetchWithAuth(
  url: string, 
  options: RequestInit = {}
): Promise<Response> {
  // 서버 측에서 originalFetch가 정의되지 않은 경우 기본 fetch 사용
  const fetchFunc = typeof originalFetch !== 'undefined' ? originalFetch : fetch;
  try {
    // API 키가 필요한 Supabase REST API 호출인지 확인
    if ((url.includes('/rest/v1/') || url.includes('izkumvvlkrkgiuuczffp.supabase.co/rest/v1/')) && !url.includes('apikey=')) {
      // 예외 처리할 엔드포인트 정의 (이미지, 프로필, 별점 관련)
      const exemptEndpoints = [
        '/meal_images', 
        '/profiles', 
        '/menu_item_ratings'
      ];
      
      // 예외 처리 검사
      const isExemptEndpoint = exemptEndpoints.some(endpoint => url.includes(endpoint));
      
      if (isExemptEndpoint) {
        console.debug('예외 처리 엔드포인트 요청 허용 (fetchWithAuth):', url);
      } else {
        // API 키 헤더 확인
        let apiKeyPresent = false;
        if (options.headers) {
          if (options.headers instanceof Headers) {
            apiKeyPresent = options.headers.has('apikey') || options.headers.has('authorization');
          } else {
            // 일반 객체인 경우
            apiKeyPresent = Object.entries(options.headers).some(([key, value]) => 
              typeof key === 'string' && (key.toLowerCase() === 'apikey' || key.toLowerCase() === 'authorization')
            );
          }
        }

        if (!apiKeyPresent) {
          console.warn('API 키 없는 요청 차단 (fetchWithAuth):', url, options.headers);
          return new Response(JSON.stringify({
            error: 'No API key found in request',
            message: 'API 키가 필요한 요청입니다. 인증 정보를 확인하세요. (Generated by fetchWithAuth)'
          }), { status: 401 });
        }
      }
    }
    
    // 정상 요청 전송
    const response = await fetchFunc(url, options);
    
    // 404/406 오류 처리 - 브라우저 호환성 이슈 해결
    if ((response.status === 404 || response.status === 406) && 
        (url.includes('/meal_images') || url.includes('/comment_likes'))) {
      console.debug(`${response.status} 오류 정상 처리 - ${url.includes('/meal_images') ? '이미지' : '좋아요'} 요청:`, url);
      return new Response(JSON.stringify({ data: url.includes('select=id') ? null : [] }), { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    // 웨일 브라우저에서 발생하는 특수한 406 Not Acceptable 오류 처리
    if (response.status === 406 && typeof navigator !== 'undefined' && 
        navigator.userAgent && 
        (navigator.userAgent.includes('Whale') || navigator.userAgent.includes('NAVER'))) {
      console.debug('웨일 브라우저 특수 406 오류 정상 처리:', url);
      return new Response(JSON.stringify({ data: [] }), { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return response;
  } catch (error) {
    console.error('API 요청 오류:', error);
    return new Response(
      JSON.stringify({ 
        error: 'API request failed',
        message: '네트워크 오류가 발생했습니다. 잠시 후 다시 시도해주세요.'
      }),
      { status: 500 }
    );
  }
}

// API 엔드포인트 상수
export const API_ENDPOINTS = {
  MEALS: '/api/meals',
  MEAL_IMAGES: '/api/meal-images',
  SCHOOL: '/api/school',
  USER: '/api/user'
};
