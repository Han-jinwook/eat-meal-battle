/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/meals/route";
exports.ids = ["app/api/meals/route"];
exports.modules = {

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmeals%2Froute&page=%2Fapi%2Fmeals%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmeals%2Froute.ts&appDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmeals%2Froute&page=%2Fapi%2Fmeals%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmeals%2Froute.ts&appDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_Windsurf_eat_meal_battle_apps_app_src_app_api_meals_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/meals/route.ts */ \"(rsc)/./src/app/api/meals/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/meals/route\",\n        pathname: \"/api/meals\",\n        filename: \"route\",\n        bundlePath: \"app/api/meals/route\"\n    },\n    resolvedPagePath: \"D:\\\\Windsurf\\\\eat-meal-battle\\\\apps\\\\app\\\\src\\\\app\\\\api\\\\meals\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_Windsurf_eat_meal_battle_apps_app_src_app_api_meals_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyL2luZGV4LmpzP25hbWU9YXBwJTJGYXBpJTJGbWVhbHMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm1lYWxzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbWVhbHMlMkZyb3V0ZS50cyZhcHBEaXI9RCUzQSU1Q1dpbmRzdXJmJTVDZWF0LW1lYWwtYmF0dGxlJTVDYXBwcyU1Q2FwcCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RCUzQSU1Q1dpbmRzdXJmJTVDZWF0LW1lYWwtYmF0dGxlJTVDYXBwcyU1Q2FwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD1zdGFuZGFsb25lJnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ3dCO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFxXaW5kc3VyZlxcXFxlYXQtbWVhbC1iYXR0bGVcXFxcYXBwc1xcXFxhcHBcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcbWVhbHNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9tZWFscy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL21lYWxzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9tZWFscy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXFdpbmRzdXJmXFxcXGVhdC1tZWFsLWJhdHRsZVxcXFxhcHBzXFxcXGFwcFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxtZWFsc1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmeals%2Froute&page=%2Fapi%2Fmeals%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmeals%2Froute.ts&appDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/meals/route.ts":
/*!************************************!*\
  !*** ./src/app/api/meals/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/../../node_modules/@supabase/ssr/dist/index.mjs\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/headers */ \"(rsc)/../../node_modules/next/dist/api/headers.js\");\n\n\n\n// 교육부 NEIS Open API 주소\nconst NEIS_API_BASE_URL = 'https://open.neis.go.kr/hub';\n// 교육부 API 키\nconst API_KEY = process.env.NEIS_API_KEY || '';\n/**\n * 날짜 형식 변환 (YYYYMMDD)\n * @param date 날짜 객체\n * @returns YYYYMMDD 형식의 문자열\n */ function formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}${month}${day}`;\n}\n/**\n * 급식 정보 API 호출\n * @param schoolCode 학교 코드\n * @param officeCode 교육청 코드\n * @param date 날짜 (YYYYMMDD 형식)\n * @returns 급식 정보\n */ async function fetchMealInfo(schoolCode, officeCode, date) {\n    // NEIS API 호출을 위해 날짜 형식을 YYYYMMDD로 변환 (API는 하이픈이 없는 형식 요구)\n    let apiDate = date;\n    if (date && date.includes('-')) {\n        // YYYY-MM-DD 형식이면 YYYYMMDD로 변환\n        apiDate = date.replace(/-/g, '');\n        console.log(`API 호출을 위해 날짜 형식 변환: ${date} -> ${apiDate}`);\n    }\n    // NEIS API 호출 URL 구성\n    const apiUrl = `${NEIS_API_BASE_URL}/mealServiceDietInfo`;\n    const queryParams = new URLSearchParams({\n        KEY: API_KEY,\n        Type: 'json',\n        pIndex: '1',\n        pSize: '100',\n        ATPT_OFCDC_SC_CODE: officeCode,\n        SD_SCHUL_CODE: schoolCode,\n        MLSV_YMD: apiDate\n    });\n    const fullUrl = `${apiUrl}?${queryParams.toString()}`;\n    console.log(`급식 API 요청 URL: ${fullUrl}`);\n    // API 호출\n    const response = await fetch(fullUrl);\n    if (!response.ok) {\n        console.error(`API 응답 상태 코드: ${response.status}`);\n        throw new Error('교육부 급식 API 호출 실패');\n    }\n    const data = await response.json();\n    return data;\n}\n/**\n * 급식 정보 파싱\n * @param apiResponse API 응답 데이터\n * @returns 파싱된 급식 정보\n */ function parseMealInfo(apiResponse) {\n    // 파싱된 급식 정보 결과 배열\n    const meals = [];\n    // NEIS API 응답 구조: { RESULT: { CODE: 'SUCCESS' }, mealServiceDietInfo: [{ head: [...] }, { row: [...] }] }\n    if (apiResponse.mealServiceDietInfo && Array.isArray(apiResponse.mealServiceDietInfo)) {\n        // 응답에 mealServiceDietInfo가 있고 배열인 경우\n        if (apiResponse.mealServiceDietInfo.length > 1 && apiResponse.mealServiceDietInfo[1].row) {\n            const mealRows = apiResponse.mealServiceDietInfo[1].row;\n            // 각 급식 정보 처리\n            for (const meal of mealRows){\n                // 메뉴 항목 파싱 (불필요한 문자 제거)\n                let menuItems = [];\n                if (meal.DDISH_NM) {\n                    menuItems = meal.DDISH_NM.split('<br/>').map((item)=>item.replace(/\\([0-9\\.]+\\)/g, '').trim()).filter((item)=>item);\n                }\n                // 날짜 형식 통일 (YYYYMMDD -> YYYY-MM-DD)\n                let formattedDate = meal.MLSV_YMD;\n                if (formattedDate && formattedDate.length === 8) {\n                    formattedDate = `${formattedDate.substring(0, 4)}-${formattedDate.substring(4, 6)}-${formattedDate.substring(6, 8)}`;\n                }\n                // 식사 타입 한글로 통일\n                let mealType = meal.MMEAL_SC_NM;\n                if (mealType === 'breakfast' || mealType === 'Breakfast') {\n                    mealType = '조식';\n                } else if (mealType === 'lunch' || mealType === 'Lunch') {\n                    mealType = '중식';\n                } else if (mealType === 'dinner' || mealType === 'Dinner') {\n                    mealType = '석식';\n                }\n                meals.push({\n                    school_code: meal.SD_SCHUL_CODE,\n                    office_code: meal.ATPT_OFCDC_SC_CODE,\n                    meal_date: formattedDate,\n                    meal_type: mealType,\n                    menu_items: menuItems,\n                    kcal: meal.CAL_INFO || '0 kcal',\n                    // nutrition_info 필드 제거\n                    origin_info: meal.ORPLC_INFO || null,\n                    ntr_info: meal.NTR_INFO || {},\n                    raw_data: meal\n                });\n            }\n        }\n    } else if (apiResponse.RESULT && apiResponse.RESULT.CODE !== 'SUCCESS') {\n        // API 오류 응답인 경우\n        console.error(`API 오류: ${apiResponse.RESULT.CODE} - ${apiResponse.RESULT.MESSAGE || '알 수 없는 오류'}`);\n    }\n    return meals;\n}\n/**\n * 특정 학교의 급식 정보 조회 API (GET)\n * \n * Query Parameters:\n * - school_code: 학교 코드\n * - office_code: 교육청 코드\n * - date: 날짜 (YYYYMMDD 형식, 기본값: 오늘)\n */ async function GET(request) {\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_2__.cookies)(); // cookies 함수 호출\n    const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_1__.createServerClient)(\"https://izkumvvlkrkgiuuczffp.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml6a3VtdnZsa3JrZ2l1dWN6ZmZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0MTI3NzksImV4cCI6MjA2MDk4ODc3OX0.pQH_znuBuBfLBJdnMagX4_HE37Z8uraCp1_MaJFtEfc\", {\n        cookies: ()=>cookieStore\n    });\n    const { searchParams } = new URL(request.url);\n    // 파라미터 추출\n    const schoolCode = searchParams.get('school_code');\n    const officeCode = searchParams.get('office_code');\n    const date = searchParams.get('date');\n    if (!schoolCode || !officeCode || !date) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: '필수 파라미터가 누락되었습니다 (school_code, office_code, date)'\n        }, {\n            status: 400\n        });\n    }\n    try {\n        // 날짜 형식 확인 및 통일 (DB 조회 전)\n        let formattedDate = date;\n        // YYYYMMDD 형식이면 YYYY-MM-DD로 변환\n        if (date && date.length === 8 && !date.includes('-')) {\n            formattedDate = `${date.substring(0, 4)}-${date.substring(4, 6)}-${date.substring(6, 8)}`;\n            console.log(`날짜 형식 변환 (조회 전): ${date} -> ${formattedDate}`);\n        }\n        // 1. DB에서 급식 정보 가져오기 (형식화된 날짜 사용)\n        const { data: dbMeals, error: dbError } = await supabase.from('meal_menus').select('*').eq('school_code', schoolCode).eq('meal_date', formattedDate);\n        if (dbError) {\n            throw new Error(`DB 조회 오류: ${dbError.message}`);\n        }\n        // DB에 데이터가 있으면 바로 반환\n        if (dbMeals && dbMeals.length > 0) {\n            console.log(`DB에서 ${dbMeals.length}개의 급식 정보를 가져왔습니다.`);\n            // 빈 급식 정보 확인 (meal_type이 'empty'인 경우)\n            const hasEmptyResult = dbMeals.some((meal)=>meal.meal_type === 'empty');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                date: formattedDate,\n                meals: hasEmptyResult ? [] : dbMeals,\n                source: 'database',\n                is_empty_result: hasEmptyResult,\n                school_code: schoolCode,\n                office_code: officeCode\n            });\n        }\n        // 2. DB에 없으면 API 호출\n        console.log('DB에 없는 데이터입니다. API 호출을 시도합니다.');\n        const mealData = await fetchMealInfo(schoolCode, officeCode, date);\n        // 급식 정보 파싱\n        const meals = parseMealInfo(mealData);\n        // 3. DB에 결과 저장 (급식 정보가 있던 없던 저장)\n        // 급식 정보가 없는 경우도 저장하여 중복 API 호출 방지\n        try {\n            // formattedDate는 위에서 이미 정의되었음\n            console.log(`저장에 사용할 날짜 형식: ${formattedDate}`);\n            // 날짜 형식은 무조건 YYYY-MM-DD 형식을 사용\n            // 이미 저장된 데이터가 있는지 확인 (중복 체크 정확도 향상을 위해 날짜 형식 통일)\n            const { data: existingData, error: checkError } = await supabase.from('meal_menus').select('id, meal_type').eq('school_code', schoolCode).eq('meal_date', formattedDate);\n            if (checkError) {\n                console.error('기존 데이터 확인 오류:', checkError);\n            }\n            // 이미 데이터가 있으면 저장하지 않고 기존 데이터 반환\n            if (existingData && existingData.length > 0) {\n                console.log(`이미 DB에 ${formattedDate} 날짜의 급식 정보가 ${existingData.length}개 있습니다.`);\n                // 기존 데이터를 다시 조회하여 반환\n                const { data: existingMeals, error: fetchError } = await supabase.from('meal_menus').select('*').eq('school_code', schoolCode).eq('meal_date', formattedDate);\n                if (fetchError) {\n                    console.error('기존 데이터 조회 오류:', fetchError);\n                    throw new Error(`기존 데이터 조회 오류: ${fetchError.message}`);\n                }\n                // 빈 급식 정보 확인\n                const hasEmptyResult = existingMeals && existingMeals.some((meal)=>meal.meal_type === 'empty');\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    date: formattedDate,\n                    meals: hasEmptyResult ? [] : existingMeals,\n                    source: 'database',\n                    is_empty_result: hasEmptyResult,\n                    school_code: schoolCode,\n                    office_code: officeCode\n                });\n            }\n            if (meals && meals.length > 0) {\n                // 급식 정보가 있는 경우\n                const mealRecords = meals.map((meal)=>({\n                        school_code: meal.school_code,\n                        office_code: meal.office_code,\n                        meal_date: meal.meal_date,\n                        meal_type: meal.meal_type,\n                        menu_items: meal.menu_items,\n                        kcal: meal.kcal,\n                        // nutrition_info 필드 제거 (DB 스키마 변경에 맞추기)\n                        origin_info: meal.origin_info,\n                        ntr_info: meal.ntr_info || {}\n                    }));\n                // DB에 저장\n                const { error: insertError } = await supabase.from('meal_menus').insert(mealRecords);\n                if (insertError) {\n                    console.error('급식 정보 DB 저장 오류:', insertError);\n                } else {\n                    console.log(`${meals.length}개의 급식 정보를 DB에 저장했습니다.`);\n                }\n            } else {\n                // 급식 정보가 없는 경우에도 빈 레코드 저장 (중복 API 호출 방지)\n                const emptyRecord = {\n                    school_code: schoolCode,\n                    office_code: officeCode,\n                    meal_date: formattedDate,\n                    meal_type: '중식',\n                    menu_items: [\n                        '급식 정보가 없습니다'\n                    ],\n                    kcal: '0 kcal',\n                    // nutrition_info 필드 제거\n                    origin_info: [],\n                    ntr_info: {}\n                };\n                try {\n                    // DB에 빈 급식 정보 저장\n                    const { error: emptyInsertError } = await supabase.from('meal_menus').insert([\n                        emptyRecord\n                    ]);\n                    if (emptyInsertError) {\n                        console.error('빈 급식 정보 DB 저장 오류:', emptyInsertError);\n                    } else {\n                        console.log('빈 급식 정보를 DB에 저장했습니다.');\n                    }\n                } catch (saveError) {\n                    console.error('빈 급식 정보 저장 오류:', saveError);\n                }\n                // API 응답에 오류 코드가 있는지 확인\n                if (mealData.RESULT && mealData.RESULT.CODE !== 'INFO-000') {\n                    console.error(`API 오류: ${mealData.RESULT.CODE} - ${mealData.RESULT.MESSAGE || '알 수 없는 오류'}`);\n                }\n            }\n        } catch (dbError) {\n            console.error('DB 저장 중 오류 발생:', dbError);\n        }\n        // 4. 결과 반환\n        // 결과 반환 전에 DB에 저장 작업이 완료되었는지 확인\n        // DB에서 최신 데이터 다시 조회 (형식화된 날짜 사용)\n        const { data: savedMeals, error: savedError } = await supabase.from('meal_menus').select('*').eq('school_code', schoolCode).eq('meal_date', formattedDate);\n        if (savedError) {\n            console.error('저장된 데이터 조회 오류:', savedError);\n        }\n        // 실제로 저장된 데이터가 있으면 그것을 반환, 없으면 API 결과 반환\n        let finalMeals = savedMeals && savedMeals.length > 0 ? savedMeals : meals;\n        let hasEmptyMeal = savedMeals && savedMeals.length > 0 ? savedMeals.some((meal)=>meal.meal_type === 'empty') : meals.length === 0;\n        // 급식 정보가 전혀 없는 경우 (savedMeals도 없고 meals도 없는 경우)\n        // 반드시 empty 레코드를 DB에 저장하여 추후 동일한 검색에 API 호출 방지\n        // 단, 중복 검사를 위해 school_code + office_code + meal_date 조합으로 한번 더 확인\n        if (finalMeals.length === 0 && !hasEmptyMeal) {\n            console.log(`${formattedDate} 날짜의 급식 정보가 없습니다. 빈 레코드 저장 시도...`);\n            // 동일한 school_code + office_code + meal_date 조합으로 이미 저장된 급식 정보가 있는지 한번 더 확인\n            console.log(`중복 여부 검사: ${schoolCode}, ${officeCode}, ${formattedDate}`);\n            const { data: duplicateCheck, error: dupCheckError } = await supabase.from('meal_menus').select('id').eq('school_code', schoolCode).eq('office_code', officeCode).eq('meal_date', formattedDate);\n            if (dupCheckError) {\n                console.error('중복 확인 오류:', dupCheckError);\n            }\n            // 이미 동일한 조건의 데이터가 있으면 추가 저장하지 않음\n            if (duplicateCheck && duplicateCheck.length > 0) {\n                console.log(`이미 ${duplicateCheck.length}개의 동일한 레코드가 있어 저장하지 않습니다.`);\n                // 기존 데이터 사용\n                console.log('DB 쿼리 조건:', {\n                    school_code: schoolCode,\n                    office_code: officeCode,\n                    meal_date: formattedDate\n                });\n                const { data: existingData } = await supabase.from('meal_menus').select('*').eq('school_code', schoolCode).eq('office_code', officeCode).eq('meal_date', formattedDate);\n                if (existingData && existingData.length > 0) {\n                    finalMeals = existingData;\n                    hasEmptyMeal = existingData.some((meal)=>meal.meal_type === 'empty');\n                }\n            } else {\n                // 중복이 없는 경우에만 새 레코드 추가\n                const emptyRecord = {\n                    school_code: schoolCode,\n                    office_code: officeCode,\n                    meal_date: formattedDate,\n                    meal_type: '중식',\n                    menu_items: [\n                        '급식 정보가 없습니다 (주말 또는 공휴일)'\n                    ],\n                    kcal: '0 kcal',\n                    origin_info: [],\n                    ntr_info: {}\n                };\n                try {\n                    // DB에 빈 급식 정보 저장\n                    const { data: emptyData, error: emptyInsertError } = await supabase.from('meal_menus').insert([\n                        emptyRecord\n                    ]).select();\n                    if (emptyInsertError) {\n                        console.error('빈 급식 정보 DB 저장 오류:', emptyInsertError);\n                    } else {\n                        console.log('빈 급식 정보를 DB에 성공적으로 저장했습니다.');\n                        hasEmptyMeal = true;\n                        finalMeals = emptyData || [];\n                    }\n                } catch (saveError) {\n                    console.error('빈 급식 정보 저장 오류:', saveError);\n                }\n            }\n        }\n        // 날짜 형식 통일 처리 - formattedDate가 없을 경우 원래 date 사용\n        const responseDate = formattedDate || date;\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            date: responseDate,\n            meals: hasEmptyMeal ? [] : finalMeals,\n            source: hasEmptyMeal ? 'database' : savedMeals && savedMeals.length > 0 ? 'database' : 'api',\n            is_empty_result: hasEmptyMeal,\n            school_code: schoolCode,\n            office_code: officeCode\n        });\n    } catch (error) {\n        console.error('급식 정보 API 오류:', error);\n        // 개발 환경에서는 오류 상세 정보 포함\n        const errorMessage =  true ? `급식 정보를 가져오는 중 오류가 발생했습니다: ${error.message}` : 0;\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * 모든 등록된 학교의 급식 정보를 가져와 DB에 저장 (POST)\n * 스케줄러에서 호출하는 용도\n */ async function POST(request) {\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_2__.cookies)(); // cookies 함수 호출\n    const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_1__.createServerClient)(\"https://izkumvvlkrkgiuuczffp.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml6a3VtdnZsa3JrZ2l1dWN6ZmZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0MTI3NzksImV4cCI6MjA2MDk4ODc3OX0.pQH_znuBuBfLBJdnMagX4_HE37Z8uraCp1_MaJFtEfc\", {\n        cookies: ()=>cookieStore\n    });\n    const today = formatDate(new Date());\n    try {\n        // 인증 확인 (실제 환경에서는 적절한 인증 체크 필요)\n        // const { data: session } = await supabase.auth.getSession();\n        // if (!session?.session) {\n        //   return NextResponse.json({ error: '인증되지 않은 요청입니다' }, { status: 401 });\n        // }\n        // 1. DB에서 모든 등록된 학교 정보 가져오기 (중복 제거)\n        const { data: schools, error: schoolsError } = await supabase.from('school_infos').select('school_code, region').order('school_code');\n        if (schoolsError) {\n            throw new Error(`학교 정보 조회 실패: ${schoolsError.message}`);\n        }\n        if (!schools || schools.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: '등록된 학교가 없습니다'\n            });\n        }\n        // 중복 제거를 위한 Map (school_code + office_code 기준)\n        const uniqueSchools = new Map();\n        schools.forEach((school)=>{\n            // 교육청 코드 매핑 필요 (region에서 추출하거나 다른 방법 사용)\n            // 일단 임시로 \"B10\" (서울) 코드 사용\n            const officeCode = \"B10\"; // TODO: region에서 교육청 코드 매핑 로직 구현\n            const key = `${school.school_code}-${officeCode}`;\n            if (!uniqueSchools.has(key)) {\n                uniqueSchools.set(key, {\n                    school_code: school.school_code,\n                    office_code: officeCode\n                });\n            }\n        });\n        console.log(`총 ${uniqueSchools.size}개 학교의 급식 정보를 가져옵니다...`);\n        // 2. 각 학교별로 급식 정보 가져오기\n        const allMeals = [];\n        const errors = [];\n        for (const [key, school] of uniqueSchools.entries()){\n            try {\n                // 급식 API 호출\n                const mealData = await fetchMealInfo(school.school_code, school.office_code, today);\n                const meals = parseMealInfo(mealData);\n                if (meals.length > 0) {\n                    allMeals.push(...meals);\n                }\n            } catch (error) {\n                console.error(`${key} 학교 급식 정보 가져오기 실패:`, error);\n                errors.push({\n                    school_code: school.school_code,\n                    office_code: school.office_code,\n                    error: error.message\n                });\n            }\n            // API 호출 제한을 위한 지연\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n        }\n        // 3. 가져온 급식 정보 DB에 저장\n        if (allMeals.length > 0) {\n            // 새 데이터 저장 (삭제 대신 학교/날짜/급식타입별로 확인하여 추가 또는 업데이트)\n            const mealRecords = allMeals.map((meal)=>({\n                    school_code: meal.school_code,\n                    office_code: meal.office_code,\n                    meal_date: meal.meal_date,\n                    meal_type: meal.meal_type,\n                    menu_items: meal.menu_items,\n                    kcal: meal.kcal,\n                    // nutrition_info 필드 제거\n                    origin_info: meal.origin_info,\n                    ntr_info: meal.ntr_info\n                }));\n            // 각 급식 데이터별로 처리\n            let updatedCount = 0;\n            let insertedCount = 0;\n            let errorCount = 0;\n            for (const meal of mealRecords){\n                try {\n                    // 해당 학교/날짜/급식 타입에 대한 데이터가 있는지 확인\n                    const { data: existingMeal, error: selectError } = await supabase.from('meal_menus').select('id').eq('school_code', meal.school_code).eq('meal_date', meal.meal_date).eq('meal_type', meal.meal_type).maybeSingle();\n                    if (selectError && selectError.code !== 'PGRST116') {\n                        console.error(`급식 데이터 조회 오류: ${selectError.message}`);\n                        errorCount++;\n                        continue;\n                    }\n                    if (existingMeal) {\n                        // 기존 데이터가 있으면 업데이트\n                        const { error: updateError } = await supabase.from('meal_menus').update({\n                            menu_items: meal.menu_items,\n                            kcal: meal.kcal,\n                            // nutrition_info 필드 제거\n                            origin_info: meal.origin_info,\n                            ntr_info: meal.ntr_info,\n                            updated_at: new Date().toISOString()\n                        }).eq('id', existingMeal.id);\n                        if (updateError) {\n                            console.error(`급식 데이터 업데이트 오류: ${updateError.message}`);\n                            errorCount++;\n                        } else {\n                            updatedCount++;\n                        }\n                    } else {\n                        // 없으면 새로 추가\n                        const { error: insertError } = await supabase.from('meal_menus').insert([\n                            meal\n                        ]);\n                        if (insertError) {\n                            console.error(`급식 데이터 추가 오류: ${insertError.message}`);\n                            errorCount++;\n                        } else {\n                            insertedCount++;\n                        }\n                    }\n                } catch (err) {\n                    console.error(`급식 데이터 처리 중 예외 발생: ${err.message}`);\n                    errorCount++;\n                }\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: `${allMeals.length}개의 급식 정보가 성공적으로 저장되었습니다`,\n                errors: errors.length > 0 ? errors : undefined,\n                date: today // 원래 입력된 date 사용\n            });\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: '저장할 급식 정보가 없습니다',\n                errors,\n                date: today // 원래 입력된 date 사용\n            });\n        }\n    } catch (error) {\n        console.error('급식 정보 처리 오류:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: `급식 정보 처리 중 오류가 발생했습니다: ${error.message}`\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/meals/route.ts\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/@opentelemetry","vendor-chunks/whatwg-url","vendor-chunks/ramda","vendor-chunks/cookie","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fmeals%2Froute&page=%2Fapi%2Fmeals%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmeals%2Froute.ts&appDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CWindsurf%5Ceat-meal-battle%5Capps%5Capp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();